import { SearchEventsTypes } from "../events/searchEvents.js";

export const Filters = {
  // move it to the SearchEngine class ?
  ingredients: {
    displayName: "IngrÃ©dients",
    id: "ingredients", // we can directly use the object key as id, but for now we keep it also as a property for readability
    name: "ingredients", // BETTER THAN ID ? BECAUSE IT'S NOT REALLY AN ID. Or id is ok.
  },
  appliances: {
    displayName: "Appareils",
    id: "appliances",
  },
  utensils: {
    displayName: "Ustensiles",
    id: "utensils",
  },
};

/*
 * There are 3 ways to implement the search engine as a 'singleton':
 *  1. class singleton POO implementation, but this is not really the JS way
 *   with module.
 *  2. JS module, the JS way of single instance. And we're using modules.
 *  3. full static class, with static methods and properties and static
 *   initialization block. This is not really the modern JS way, and not really
 *   a POO singleton, but it works in a full JS class implementation logic.
 *  4. instead of full static class, we can just make an object literal.
 * I'm not sur that for OC project the module way is the best, because we
 * are not really supposed to use modules, even if I use them at least for
 * proper import/export readability. An evaluator could argue about it. But the
 * singleton class implementation is not really the modern JS way, so I'm
 * trying the static class implementation for now. I had to deal with similar
 * implementation in Java, which is class based, but the search engine is not
 * really the definition of a set of static methods and properties.
 *
 * */

//
// https://www.typescriptlang.org/docs/handbook/2/classes.html#why-no-static-classes
//

export default class SearchEngine {
  static #ingredients;
  static #appliances;
  static #utensils;
  static #recipes;

  static {
    // fetch the default data and notify the views (dropdowns and cards) when data are ready to update views
    this.#ingredients = new Set(); // les initialiser vides dans le constructeur ?
    this.#appliances = new Set();
    this.#utensils = new Set();
    this.#recipes = [];
  }
  // can use addEventListener and dispatchEvent
  // PLACEHOLDER code generated by copilot
  // constructor() {
  //   // this.searchInput = document.querySelector("#search");
  //   // this.searchInput.addEventListener("keyup", this.search.bind(this));
  //   // REAL CODE
  //   this.#initialize();
  // }

  // #initialize() {
  //   // fetch the default data and notify the views (dropdowns and cards) when data are ready to update views
  //   this.#ingredients = new Set(); // les initialiser vides dans le constructeur ?
  //   this.#appliances = new Set();
  //   this.#utensils = new Set();
  //   this.#recipes = [];
  //   // initialize the this.addEventListener for the custom events
  //   this.addEventListener(SearchEventsTypes.AddTag, (event) => {
  //     console.log("Received add tag event", event);
  //   });
  // }

  // search() {
  //   let searchValue = this.searchInput.value.toLowerCase();
  //   let allCards = document.querySelectorAll(".card");
  //   let allCardsArray = Array.from(allCards);
  //   allCardsArray.forEach((card) => {
  //     let cardTitle = card
  //       .querySelector(".card-title")
  //       .textContent.toLowerCase();
  //     if (cardTitle.indexOf(searchValue) !== -1) {
  //       card.style.display = "block";
  //     } else {
  //       card.style.display = "none";
  //     }
  //   });
  // }
}
